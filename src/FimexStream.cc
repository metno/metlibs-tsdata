/*
 * FimexStream.cc
 *
 *  Created on: Aug 2, 2013
 *      Author: juergens
 */

/*
 Copyright (C) 2006-2016 met.no

 Contact information:
 Norwegian Meteorological Institute
 Box 43 Blindern
 0313 OSLO
 NORWAY
 email: diana@met.no

 This file is part of generated by met.no

 This is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with Tseries; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */


#include "FimexStream.h"

#include "ptDiagramData.h"

#include <fimex/boost-posix-time-compat.h>
#include <fimex/CDM.h>
#include <fimex/CDMInterpolator.h>
#include <fimex/CDMReaderUtils.h>
#include <fimex/Data.h>
#include <fimex/mifi_constants.h>

#include <boost/algorithm/string/split.hpp>
#include <boost/algorithm/string/trim.hpp>
#include <boost/algorithm/string/classification.hpp>
#include <boost/algorithm/string/replace.hpp>
#include <boost/shared_array.hpp>

#include <boost/interprocess/anonymous_shared_memory.hpp>
//#include <boost/interprocess/shared_memory_object.hpp>
#include <boost/interprocess/mapped_region.hpp>
#include <unistd.h>
#include <wait.h>

#include <algorithm>
#include <numeric>
#include <functional>

#define MILOGGER_CATEGORY "metlibs.tsdata.FimexStream"
#include <miLogger/miLogging.h>

using namespace std;
using namespace miutil;
using namespace MetNoFimex;

namespace pets
{
FimexPoslist FimexStream::commonposlist;
int          FimexStream::commonposlistVersion=0;
int          FimexStream::progress=100;
std::string  FimexStream::progressMessage="";
std::set<std::string> FimexStream::parameterFilter;
std::vector<pets::FimexParameter> FimexStream::fimexpar;
std::vector<std::string> FimexStream::allParameters;


int  FimexStream::getProgress()
{
  return progress;
}

std::string FimexStream::getProgressMessage()
{
  return progressMessage;
}

const std::set<std::string>& FimexStream::getParameterFilter()
{
  return parameterFilter;
}

bool FimexStream::isFiltered(const std::string& petsname)
{
  return bool(parameterFilter.count(petsname));
}

void FimexStream::setParameterFilter(const std::set<std::string>& pfilter)
{
  parameterFilter=pfilter;
}

void FimexStream::setFimexParameters(const std::vector<pets::FimexParameter>& par)
{
  fimexpar=par;
  vector<string> apar;
  for(size_t i=0;i<fimexpar.size();i++)
    apar.push_back(fimexpar[i].parid.alias);
  allParameters=apar;
}

void FimexStream::addToAllParameters(const std::vector<std::string>& newpar)
{
  allParameters.insert(allParameters.end(), newpar.begin(), newpar.end());
}

const std::vector<std::string>& FimexStream::getAllParameters()
{
  return allParameters;
}

std::string FimexStream::getParameterFilterAsString()
{
  ostringstream ost;
  set<string>::iterator itr = parameterFilter.begin();
  string delimiter = "";
  for (; itr != parameterFilter.end(); itr++) {
    ost << delimiter << *itr;
    delimiter = ":";
  }
  return ost.str();
}

void FimexStream::setParameterFilterFromString(const std::string& blist)
{
  set<string> tokens;
  boost::split(tokens, blist, boost::algorithm::is_any_of(":"));
  parameterFilter = tokens;
}

void FimexStream::setCommonPoslist(const FimexPoslist& cposlist)
{
  commonposlist = cposlist;
  commonposlistVersion++;
}

void FimexStream::setCommonPoslistFromStringlist(const std::vector<std::string>& newposlist)
{
  FimexPoslist newFimexposlist;

  for(unsigned int i=0; i<newposlist.size(); i++)
    newFimexposlist.addEntry(newposlist[i]);

  setCommonPoslist(newFimexposlist);
}

void FimexStream::setPositions()
{
  poslist = commonposlist;
  poslistVersion = commonposlistVersion;
}

FimexStream::FimexStream(const std::string& fname, const std::string& modname,
    const std::string& ftype, const std::string& cfile)
  : filename(fname)
  , modelname(modname)
  , configfile(cfile)
  , progtime(0)
  , activePosition(0)
  , increment(0)
  , is_open(false)
{
  vector<string> typetokens;
  boost::split(typetokens, ftype, boost::algorithm::is_any_of(":"));

  filetype      =  ( typetokens.size() > 0 ? boost::trim_copy(typetokens[0]) : ftype   );
  parametertype =  ( typetokens.size() > 1 ? boost::trim_copy(typetokens[1]) : filetype);

  timeLineIsRead=false;
  poslist = commonposlist;
  poslistVersion = commonposlistVersion;
}


FimexStream::~FimexStream()
{
}

void FimexStream::clean()
{
}


bool FimexStream::createPoslistInterpolator()
{
  METLIBS_LOG_SCOPE();
  try {
    if (!reader)
      openStream();

    interpol = std::make_shared<CDMInterpolator>(reader);
    interpol->changeProjection(MIFI_INTERPOL_BILINEAR,poslist.getLon(), poslist.getLat() );
  } catch (exception& e) {
    METLIBS_LOG_ERROR("Exception during interpolation: " << e.what());
    return false;
  }
  return true;
}





void FimexStream::createTimeLine()
{
  METLIBS_LOG_SCOPE();
  using namespace MetNoFimex;

  basetimeline.clear();

  try {
    if (!interpol)
      createPoslistInterpolator();

    if (!is_open)
      return;


    // merge all time axes
    std::set<miutil::miTime> basetimes;
    for (auto cs : listCoordinateSystems(interpol)) {
      if (CoordinateAxis_cp tax = cs->getTimeAxis()) {
        DataPtr timeData = interpol->getScaledDataInUnit(tax->getName(), "seconds since 1970-01-01 00:00:00 +00:00");
        shared_array<unsigned long long> uTimes = timeData->asUInt64();
        for (size_t u = 0; u < timeData->size(); ++u) {
          const miutil::miTime t(uTimes[u]);
          if (!t.undef()) {
            basetimes.insert(t);
            METLIBS_LOG_DEBUG(LOGVAL(t));
          } else {
            METLIBS_LOG_ERROR("Invalid time value " << uTimes[u] << ", clearing basetimeline and giving up.");
            timeLineIsRead = true;
            return;
          }
        }
      }
    }
    basetimeline = std::vector<miutil::miTime>(basetimes.begin(), basetimes.end());
  } catch (exception& e) {
    METLIBS_LOG_ERROR("Exception caught: " << e.what());
  }

  timeLineIsRead = true;
}

void FimexStream::openStream()
{
  try {
    reader = CDMFileReaderFactory::create(filetype, filename, configfile);
    METLIBS_LOG_INFO("fimex stream '" << filename << "' opened");
    is_open=true;
  } catch (exception& e) {
    throw FimexstreamException("Could not open fimexstream");
  }
}

boost::posix_time::ptime FimexStream::getReferencetime()
{
  if (!reader)
    openStream();

  return fromFimexTime(getUniqueForecastReferenceTimeFT(reader));
}

void FimexStream::filterParameters(vector<ParId>& inpar)
{
  vector<ParId> tmp;
  std::swap(tmp, inpar);
  for (size_t i=0; i<tmp.size(); i++) {
    if (!parameterFilter.count(tmp[i].alias)) {
      inpar.push_back(tmp[i]);
    }
  }
}

bool FimexStream::hasParameter(const std::string& parametername)
{
  METLIBS_LOG_SCOPE(LOGVAL(parametername));
  try {
    if (!reader)
      openStream();

    if (!interpol)
      createPoslistInterpolator();

    return interpol->getCDM().hasVariable(parametername);

  } catch (exception& e) {
    METLIBS_LOG_ERROR("Exception: " << e.what());
  }
  return false;
}

bool FimexStream::hasCompleteDataset(const std::string& placename, float lat, float lon, vector<ParId> inpar)
{
  // nothing requested  - this is complete
  if (inpar.empty())
    return false;

  filterParameters(inpar);
  // position not found
  if (poslist.getPos(placename, lat, lon) < 0)
    return false;

  if (cache.empty())
    return false;

  // check if there are parameters that were not interpolated earlier
  vector<ParId> extrapar;
  cache[0].getExtrapars(inpar, extrapar);
  bool setIsComplete = true;

  for(unsigned int i=0;i<extrapar.size();i++) {
    for( unsigned int j=0;j<fimexpar.size();j++) {
      if (fimexpar[j].parid == extrapar[i] && fimexpar[j].streamtype == parametertype) {
        // we expect this parameter to be read from the fimex file
        // but does the file have the fimexparameter at all ?
        if (hasParameter(fimexpar[j].parametername)) {
          setIsComplete=false;
          break;
        }
      }
    }
  }
  return setIsComplete;
}

bool FimexStream::readData(const std::string& placename,float lat, float lon, vector<ParId>& inpar, vector<ParId>& outpar)
{
  filterParameters(inpar);

  try {
    clean();

    if (!reader)
      openStream();
    if (!is_open)
      return false;
    if (!interpol)
      createPoslistInterpolator();

    if(!timeLineIsRead) {
      createTimeLine();
    }

    if (placename.empty()) {
      return false;
    }

    activePosition = poslist.getPos(placename, lat, lon);

    // position not found
    if (activePosition < 0) {

      // aha the common poslist has changed - try to reload the cache
      if (poslistVersion != commonposlistVersion) {
        poslist = commonposlist;
        poslistVersion = commonposlistVersion;
        createPoslistInterpolator();
        cache.clear();
        activePosition = poslist.getPos(placename,lat,lon);
      }
    }

    if (cache.empty() ) {
      addToCache(0,poslist.getNumPos(),inpar,true);
    } else {
      // check if there are parameters that were not interpolated earlier
      vector<ParId> extrapar;
      cache[0].getExtrapars(inpar,extrapar);

      // try to interpolate the missing parameters
      addToCache(0,poslist.getNumPos(),extrapar,false);
    }

    if (activePosition < 0) {
      cerr << placename << " not found " << endl;
      return false;
    }

    cache[activePosition].getOutpars(inpar,outpar);

  } catch (exception& e) {
    cerr << "exception caught  in Fimex read : " << e.what();
    return false;
  }

  return true;
}

bool FimexStream::addToCache(int /*posstart*/, int poslen,vector<ParId>& inpar, bool createPoslist)
{
  METLIBS_LOG_SCOPE();
  bool foundSomeData=false;
  if (createPoslist) {
    FimexPetsCache tmp;
    for(int i=0; i<poslen; i++)
      cache.push_back(tmp);
  }
  // check the parameterlist - what to get and what not....

  int maxprogress=0;
  for (unsigned int i=0; i<inpar.size(); i++) {
    for (unsigned int j=0; j<fimexpar.size(); j++) {
      if (fimexpar[j].parid == inpar[i] && fimexpar[j].streamtype == parametertype) {
        maxprogress++;
      }
    }
  }

  int localProgress=0;
  for (unsigned int i=0; i<inpar.size(); i++) {
    for (unsigned int j=0; j<fimexpar.size(); j++) {
      if (fimexpar[j].parid == inpar[i] && fimexpar[j].streamtype == parametertype) {

        localProgress++;
        progress = (localProgress * 95) / maxprogress;

        ostringstream ost;
        ost << modelname << ": " << fimexpar[j].parametername;
        progressMessage = ost.str();

        try {
          if (readFromFimexSlice(fimexpar[j]))
            foundSomeData = true;
        } catch (exception& e) {
          METLIBS_LOG_ERROR("Exception from ReadFromFimexSlice: " << e.what());
        }

        break;
      }
    }
  }
  progress=100;
  return foundSomeData;
}

static MetNoFimex::DataPtr getParallelScaledDataSliceInUnit(size_t maxProcs, CDMReader_p reader,
    const string& parName, const string& parUnit, const vector<SliceBuilder>& slices)
{
  METLIBS_LOG_SCOPE();

  vector<size_t> sliceLengths(slices.size(), 1);
  for (size_t i = 0; i < slices.size(); i++) {
    vector<size_t> ssize = slices.at(i).getDimensionSizes();
    sliceLengths.at(i) = accumulate(ssize.begin(), ssize.end(), size_t(1), std::multiplies<size_t>());
  }
  const size_t total = accumulate(sliceLengths.begin(), sliceLengths.end(), size_t(0));
  shared_array<float> allFloats(new float[total]);

#ifndef TSDATA_FIMEX_DISABLE_FORK
  // fork: there seems to be some problem with fork() and OpenMP when
  // libomp-dev is installed (for llvm/clang), even when compiling
  // with g++

  //create a anonymous mapped shm-obj in this process
  boost::interprocess::mapped_region region(boost::interprocess::anonymous_shared_memory(total*sizeof(float)));
  assert(region.get_size() == (total*sizeof(float)));
  // fork the sub-processes
  pid_t pid;
  vector<pid_t> children;
  for (size_t i = 0; i < maxProcs; i++) {

    // starting child process ---------------------
    pid = fork();

    if(pid < 0) {
      cerr << "Error forking - no process id " << endl;
      exit(1);
    } else if (pid == 0) {
      // child code, should end with exit!
      //            boost::interprocess::mapped_region region(shm_obj, boost::interprocess::read_write);
      assert(region.get_size() == (total*sizeof(float)));
      float* regionFloat = reinterpret_cast<float*>(region.get_address());
#else // TSDATA_FIMEX_DISABLE_FORK
      float* regionFloat = allFloats.get();
#endif
      size_t startPos = 0;
      for (size_t j = 0; j < slices.size(); j++) {
#ifndef TSDATA_FIMEX_DISABLE_FORK
        if ((j % maxProcs) == i) {
#endif
          MetNoFimex::DataPtr data;
          try {
            data = reader->getScaledDataSliceInUnit(parName, parUnit, slices.at(j));
          } catch (runtime_error& ex) {
            cerr << "error fetching data on '" << parName << "', '" << parUnit << "' slice " << j << ": " << ex.what() << endl;
            data = MetNoFimex::createData(MetNoFimex::CDM_FLOAT, 0);
          }
          shared_array<float> array;
          const size_t array_size = sliceLengths.at(j);
          if (data->size() == 0) {
            array = shared_array<float>(new float[array_size]);
            std::fill(array.get(), array.get() + array_size, MIFI_UNDEFINED_F);
          } else {
            assert(data->size() == array_size);
            array = data->asFloat();
          }
          std::copy(array.get(), array.get()+sliceLengths.at(j), regionFloat + startPos);
#ifndef TSDATA_FIMEX_DISABLE_FORK
        } // j % maxProcs
#endif
        startPos += sliceLengths.at(j);
      }
#ifndef TSDATA_FIMEX_DISABLE_FORK
      // ending child process without cleanup ( _exit() ) to avoid qt-trouble
      _exit(0);

    } else  {
      // parent, handled below, should fork more
      children.push_back(pid);
    }
  }
  // parent code
  // wait for all children
  for (size_t i = 0; i < maxProcs; ++i) {
    int status;
    while (-1 == waitpid(children.at(i), &status, 0));
    if (!WIFEXITED(status) || WEXITSTATUS(status) != 0) {
      std::cerr << "Process " << i << " (pid " << children.at(i) << ") failed" << std::endl;
      throw runtime_error("child-process did not finish correctly when fetching data");
    }
  }
  // copy the shared_memory
  float* regionFloat = reinterpret_cast<float*>(region.get_address());
  std::copy(regionFloat, regionFloat+total, allFloats.get());
#endif // !TSDATA_FIMEX_DISABLE_FORK

  return createData(total, allFloats);
}


bool FimexStream::readFromFimexSlice(FimexParameter par)
{
  using namespace MetNoFimex;

  if (!reader)
    openStream();

  if (!is_open)
    return false;

  METLIBS_LOG_INFO("Interpolating Parameter: " << par.parametername << " for model " << modelname);
  boost::posix_time::ptime start  = boost::posix_time::microsec_clock::universal_time();
  MetNoFimex::SliceBuilder slice(interpol->getCDM(),par.parametername);

  unsigned int numPos=poslist.getNumPos();

  slice.setStartAndSize("x", 0, poslist.getNumPos());

  for(unsigned int i=0;i<cache.size();i++)
    cache[i].clear_tmp();

  CoordinateSystem_cp cs = findCompleteCoordinateSystemFor(listCoordinateSystems(interpol), par.parametername);
  if (!cs) {
    METLIBS_LOG_ERROR("no coordinate system for parameter '" << par.parametername << "'");
    return false;
  }
  CoordinateAxis_cp tax = cs->getTimeAxis();
  if (!tax) {
    METLIBS_LOG_ERROR("no time axis for parameter '" << par.parametername << "'");
    return false;
  }
  const std::string& timeAxis = tax->getShape().front();
  const MetNoFimex::CDMDimension& timeDim = interpol->getCDM().getDimension(timeAxis);
  const size_t timeSize = timeDim.getLength();

  for (unsigned int i=0; i<par.dimensions.size();i++) {

    if (interpol->getCDM().hasDimension(par.dimensions[i].name)) {
      if (par.dimensions[i].size < 0) {
        const MetNoFimex::CDMDimension& tmpDim = interpol->getCDM().getDimension(par.dimensions[i].name);
        par.dimensions[i].size = tmpDim.getLength() - par.dimensions[i].start;
      }

      cerr << "par.dimensions[i].size for " << par.dimensions[i].name << " = "  << par.dimensions[i].size << endl;
      slice.setStartAndSize(par.dimensions[i].name, par.dimensions[i].start, par.dimensions[i].size);
    } else {
      throw FimexstreamException(" request unknown dimension " + par.dimensions[i].name);
    }
  }

  if (basetimeline.empty())
    createTimeLine();

  // dividing in small time-slices
  vector<MetNoFimex::SliceBuilder> slices;
  for (size_t i=0; i < timeSize; i++) {
    slice.setStartAndSize(timeAxis, i, 1);
    slices.push_back(slice);
  }

  // get time-slices parallel
  size_t numProcs = 0;
#ifdef _SC_NPROCESSORS_ONLN
  numProcs = sysconf( _SC_NPROCESSORS_ONLN );
  // even better, but needs c++11: std::thread::hardware_concurrency();
#endif
  if (numProcs < 1) numProcs = 2; // default

  MetNoFimex::DataPtr sliceddata  = getParallelScaledDataSliceInUnit(numProcs, interpol, par.parametername, par.unit, slices);

  if (sliceddata.get()) {
    shared_array<float> valuesInSlice = sliceddata->asFloat();

    // all parameters in all dimensions;
    unsigned int numAll     = sliceddata->size() / numPos;
    unsigned int numTimes   = basetimeline.size();
    unsigned int numPardims = 1;
    if (numTimes)
      numPardims = numAll / numTimes; // equals 1 except for ensembles

    for (unsigned int pardim = 0; pardim < numPardims; pardim++) {
      for (unsigned int tim=0; tim < numTimes; tim++) {

        for (unsigned int pos=0; pos<numPos; pos++) {

          unsigned int index = pardim*numPos +  tim*numPardims*numPos + pos;

          if (!std::isnan(valuesInSlice[index])) {
            if (!pardim)
              cache[pos].tmp_times.push_back(basetimeline.at(tim));

            cache[pos].tmp_values.push_back(valuesInSlice[index]);

          } else {
            if (par.parid.alias == "RRAC")  { // undefined accumulated precipitation means null
              if (!pardim)
                cache[pos].tmp_times.push_back(basetimeline.at(tim));
              cache[pos].tmp_values.push_back(0);
            }
          }
        }
      }
    }

    ParId pid = par.parid;
    pid.model = modelname;
    pid.run   = 0;
    pid.level = 0;

    for(unsigned int i=0; i<cache.size(); i++)
      cache[i].process(pid);

    boost::posix_time::ptime last   = boost::posix_time::microsec_clock::universal_time();
    METLIBS_LOG_INFO("Done interpolating Parameter: " << par.parametername << " for model " << modelname << ". Used " << (last - start).total_milliseconds()
                                                      << " ms");

    return true;
  }
  cerr << " ... empty  "<< endl;
  return false;
}

bool FimexStream::getOnePar(int i, WeatherParameter& wp, ErrorFlag* ef)
{
  if (i>=0 && i<(int)cache[activePosition].parameters.size()) {
    const string& wpname =  cache[activePosition].parameters[i].Id().alias;
    if (isFiltered(wpname))
      return setErrorFlag(false, ef);

    wp = cache[activePosition].parameters[i];
    return setErrorOK(ef);
  }
  return setErrorFlag(false, ef);
}

bool FimexStream::getTimeLine(int index,vector<miTime>& tline, vector<int>& pline, ErrorFlag* ef)
{
  pline=progline;
  return setErrorFlag(cache[activePosition].timeLines.Timeline(index,tline), ef);
}

int FimexStream::numParameters()
{
  return cache[activePosition].parameters.size();
}

bool fetchDataFromFimex(ptDiagramData* diagram, FimexStream* fimex, double lat, double lon,
    const std::string& stationname,
    std::vector<ParId>& /*inpars*/, std::vector<ParId>& /*outpars*/)
{
  if (!diagram->fetchDataFromStream(fimex, false))
    return false;

  diagram->setStationFromLatLon(lat, lon, stationname);
  return true;
}

} /* namespace pets */
