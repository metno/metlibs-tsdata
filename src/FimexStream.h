/*
 * FimexStream.h
 *
 *  Created on: Aug 2, 2013
 *      Author: juergens
 */

#ifndef FIMEXSTREAM_H_
#define FIMEXSTREAM_H_

/*
 Copyright (C) 2006-2016 met.no

 Contact information:
 Norwegian Meteorological Institute
 Box 43 Blindern
 0313 OSLO
 NORWAY
 email: diana@met.no

 This file is part of generated by met.no

 This is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with Tseries; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include "ptDataStream.h"

#include <string>
#include <set>
#include <vector>
#include <list>
#include <map>


#include <fimex/coordSys/CoordinateSystem.h>
#include <fimex/CoordinateSystemSliceBuilder.h>
#include <fimex/CDMFileReaderFactory.h>
#include <fimex/CDMReader.h>
#include <fimex/CDMInterpolator.h>
#include <fimex/Data.h>

#include <boost/date_time/posix_time/posix_time.hpp>

#include <puTools/miTime.h>

#include "ptParameterDefinition.h"

#include "PetsExceptions.h"
#include "ptWeatherParameter.h"
#include "ptTimeLine.h"


#include "FimexTools.h"

class ptDiagramData;

namespace pets {

class FimexStream : public AbstractDataStream  {
private:
  std::string filename;
  std::string modelname;
  std::string filetype;
  std::string parametertype;
  std::string configfile;

  static std::vector<pets::FimexParameter> fimexpar;
  static std::vector<std::string> allParameters; // pets parameternames to create filter
  int progtime; // 0,6,12,etc for pets name

  MetNoFimex::CDMReader_p       reader;   // the datafile access
  MetNoFimex::CDMInterpolator_p interpol; // flexible interpolator - new coordinates
  static FimexPoslist commonposlist;
  static int          commonposlistVersion;
  static int          progress;
  static std::string  progressMessage;
  static std::set<std::string> parameterFilter;


  FimexPoslist poslist;
  int          poslistVersion;


  int activePosition;

  std::vector<FimexPetsCache>  cache;

  bool timeLineIsRead;
  int  increment;
  void createTimeLine();
  // pets stuff
  std::vector<miutil::miTime> basetimeline;  // basetimeline from file

  bool readFromFimexSlice(FimexParameter par);
  void clean();
  bool addToCache(int posstart, int poslen, std::vector<ParId>& inpar, bool createPoslist);
  bool is_open;
  void filterParameters(std::vector<ParId>& inpar);

public:
  FimexStream(const std::string& fname, const std::string& modname,
      const std::string& ftype, const std::string& configfile="");
  ~FimexStream();

  static void setCommonPoslist(const FimexPoslist& newCommonPoslist);
  static void setCommonPoslistFromStringlist(const std::vector<std::string>& newposlist);

  static int getProgress();
  static std::string getProgressMessage();

  static std::string getParameterFilterAsString();
  static void setParameterFilterFromString(const std::string& blist);
  static void addToAllParameters(const std::vector<std::string>&);

  static const std::set<std::string>& getParameterFilter();
  static bool isFiltered(const std::string& petsname);

  static void setParameterFilter(const std::set<std::string>& pfilter);

  static void setFimexParameters(const std::vector<pets::FimexParameter>& par);
  static const std::vector<std::string>& getAllParameters();

  void openStream();

  bool isOpen() const { return is_open; }
  bool hasParameter(const std::string& parametername);

  // set the raw position list
  void setPositions();

  // use the position list to interpolate the data
  bool createPoslistInterpolator();

  bool readData(const std::string& placename, float lat, float lon, std::vector<ParId>& inpar, std::vector<ParId>& outpar);
  boost::posix_time::ptime getReferencetime();
  bool hasCompleteDataset(const std::string& placename,float lat, float lon, std::vector<ParId> inpar);

  /// Implemented from AbstractDataStream interface -------------------------------

  bool getOnePar(int, WeatherParameter&, ErrorFlag* ef) override;
  bool getTimeLine(int index, std::vector<miutil::miTime>& tline, std::vector<int>& pline, ErrorFlag* ef) override;
  int numParameters() override;
};

bool fetchDataFromFimex(ptDiagramData* diagram, FimexStream* fimex, double lat, double lon, const std::string& fimexname,
    std::vector<ParId>& inpars, std::vector<ParId>& outpars);

} /* namespace pets */

#endif /* FIMEXSTREAM_H_ */
